library(rattle)
library("rattle")
knitr::opts_chunk$set(echo = TRUE)
k_means_cluster <- function(cluster_data,num_cluster){
cluster_data <- as.matrix(cluster_data)
num_points <- nrow(cluster_data)
num_dim <- ncol(cluster_data)
#sample from dataset to get initial mean of three clusters
start_mean <- cluster_data[sample(1:num_points,num_cluster,replace = F),]
new_cluster_label <- numeric(num_points)
old_cluster_label <- rep(1,num_points)
#stop iterating when classification does not change
while (any(old_cluster_label != new_cluster_label)){
old_cluster_label <- new_cluster_label
distance <- matrix(0,num_points,num_cluster)
#calculate each data points' Euclidean distance to each old mean of clusters
for (j in 1:num_cluster){
distance[,j] <- apply((cluster_data - matrix(start_mean[j,],nrow = num_points,
ncol = num_dim,byrow = TRUE))^2,1,sum)
}
#find shortest distance and assign each data point to a new cluster
new_cluster_label <- apply(distance,1,which.min)
#calculate new mean of new clusters
for (j in 1:num_cluster){
start_mean[j,] <- apply(cluster_data[which(new_cluster_label==j),],2,mean)
}
}
#return a vector indicating each data point's cluster
return(new_cluster_label)
}
library("rattle")
data(wine)
set.seed((3.1))
num_cluster <- 3
newdata <- wine[,-1] #exclude original Type
label <- k_means_cluster(newdata,num_cluster) #result of k-means
library(fpc)
par(mfrow=c(1,2))
plotcluster(newdata,wine$Type,main="Original Cluster")
plotcluster(newdata,label,main="k-means Cluster")
library(fpc)
par(mfrow=c(2,1))
plotcluster(newdata,wine$Type,main="Original Cluster")
plotcluster(newdata,label,main="k-means Cluster")
library(fpc)
plotcluster(newdata,wine$Type,main="Original Cluster")
plotcluster(newdata,label,main="k-means Cluster")
library(rattle)
library(rattle)
